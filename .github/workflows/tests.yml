name: Test

on:
  push:
    branches: [master]
  pull_request:
    # Check all PR

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / rust ${{ matrix.rust-version }} / ${{ matrix.build-type }} ${{ matrix.extra-name }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
          - os: ubuntu-18.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
            test-static-lib: true
            extra-name: static C library
          - os: ubuntu-18.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            build-type: release
            cargo-build-flags: --release
            do-valgrind: true
          - os: ubuntu-18.04
            rust-version: 1.46
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
          - os: ubuntu-18.04
            rust-version: beta
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
          # check the build on a stock Ubuntu 18.04, including cmake 3.10
          - os: ubuntu-18.04
            rust-version: from Ubuntu
            container: ubuntu:18.04
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
          - os: macos-10.15
            rust-version: stable
            rust-target: x86_64-apple-darwin
            build-type: debug
    steps:
      - name: install dependencies in container
        if: matrix.container == 'ubuntu:18.04'
        run: |
          apt-get update
          apt-get install -y software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          apt-get update
          apt-get install -y cmake make gcc g++ git curl rustc

      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: setup rust
        uses: actions-rs/toolchain@v1
        if: "!matrix.container"
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          target: ${{ matrix.rust-target }}

      - name: install tests dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: install valgrind
        if: matrix.do-valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: unit tests
        run: cargo test --lib --target ${{ matrix.rust-target }} ${{ matrix.cargo-build-flags }}

      - name: documentation tests
        run: cargo test --doc --target ${{ matrix.rust-target }} ${{ matrix.cargo-build-flags }}

      - name: integration tests
        env:
          RASCALINE_TEST_WITH_STATIC_LIB: ${{ matrix.test-static-lib || 0 }}
        run: cargo test --test "*" --target ${{ matrix.rust-target }} ${{ matrix.cargo-build-flags }}

      - name: check that examples compile & run
        if: matrix.build-type == 'release'
        run: cargo run --release --example compute-soap -- rascaline/examples/data/water.xyz

      - name: check that benchmarks compile and run once
        if: matrix.build-type == 'release'
        run: cargo bench -- --test
