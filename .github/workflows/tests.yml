name: Test

on:
  push:
    branches: [master]
  pull_request:
    # Check all PR

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / rust ${{ matrix.rust-version }} / ${{ matrix.build-type }} ${{ matrix.extra-name }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
          - os: ubuntu-20.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
            test-static-lib: true
            extra-name: static C library
          - os: ubuntu-20.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            build-type: release
            cargo-build-flags: --release
            do-valgrind: true
          - os: ubuntu-20.04
            rust-version: 1.56
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
          - os: ubuntu-20.04
            rust-version: beta
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
          # check the build on a stock Ubuntu 20.04, including cmake 3.10 and
          # Python 3.7
          - os: ubuntu-20.04
            rust-version: from Ubuntu
            container: ubuntu:18.04
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
          - os: macos-11
            rust-version: stable
            rust-target: x86_64-apple-darwin
            build-type: debug
    steps:
      - name: install dependencies in container
        if: matrix.container == 'ubuntu:18.04'
        run: |
          apt update
          apt install -y software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          add-apt-repository ppa:deadsnakes/ppa
          apt install -y cmake make gcc g++ git curl rustc cargo
          apt install -y python3.7 python3-pip
          ln -s /usr/bin/python3.7 /usr/bin/python

      - uses: actions/checkout@v3

      - name: setup Python
        uses: actions/setup-python@v2
        if: "!matrix.container"
        with:
          python-version: 3.8

      - name: setup rust
        uses: actions-rs/toolchain@v1
        if: "!matrix.container"
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          default: true
          target: ${{ matrix.rust-target }}

      - name: install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: install valgrind
        if: matrix.do-valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: cache tox environments
        uses: actions/cache@v3
        with:
          path: .tox
          key: tox-${{ matrix.os }}-${{ hashFiles('pyproject.toml', 'setup.cfg', 'tox.ini') }}

      - name: unit tests
        run: cargo test --lib --target ${{ matrix.rust-target }} ${{ matrix.cargo-build-flags }}

      - name: documentation tests
        run: cargo test --doc --target ${{ matrix.rust-target }} ${{ matrix.cargo-build-flags }}

      - name: integration tests
        env:
          RASCALINE_TEST_WITH_STATIC_LIB: ${{ matrix.test-static-lib || 0 }}
        run: cargo test --test "*" --target ${{ matrix.rust-target }} ${{ matrix.cargo-build-flags }}

  # second set of jobs checking that (non-test) code still compiles/run as expected
  prevent-bitrot:
    runs-on: ubuntu-20.04
    name: check examples / benchmarks / Python build
    strategy:
      matrix:
        include:
          - rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3

      - name: setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: setup rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          default: true
          target: ${{ matrix.rust-target }}

      - name: install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: cache tox environments
        uses: actions/cache@v3
        with:
          path: .tox
          key: tox-${{ matrix.os }}-${{ hashFiles('pyproject.toml', 'setup.cfg', 'tox.ini') }}

      - name: check that examples compile & run
        run: cargo run --release --example compute-soap -- rascaline/examples/data/water.xyz

      - name: check that benchmarks compile and run once
        run: cargo bench -- --test

      - name: python build tests
        run: tox -e build-python
