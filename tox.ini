[tox]
min_version = 4.0
# these are the default environments, i.e. the list of tests running when you
# execute `tox` in the command-line without anything else
envlist =
    lint
    all-deps
    min-deps
    docs-tests
    torch-tests


[testenv]
package = external
package_env = build-rascaline
passenv = *
lint_folders = "{toxinidir}/python" "{toxinidir}/setup.py"

# we need to manually install dependencies for rascaline, since tox will install
# the fresh wheel with `--no-deps` after building it.
equistore-core-requirement =
    equistore-core @ https://github.com/lab-cosmo/equistore/archive/c022fde.zip\#subdirectory=python/equistore-core

equistore-torch-requirement =
    equistore-torch @ https://github.com/lab-cosmo/equistore/archive/c022fde.zip\#subdirectory=python/equistore-torch

commands =
    # error if the user gives a wrong testenv name in `tox -e`
    python -c "import sys; print('environement {env_name} does not exist'); sys.exit(1)"


[testenv:build-rascaline]
# This environment is only used to build the wheels which are then re-used by
# all other environments requiring equistore to be installed
passenv = *
deps =
    setuptools
    wheel
    cmake

commands =
    pip wheel . --no-deps --no-build-isolation --check-build-dependencies --wheel-dir {envtmpdir}/dist


[testenv:lint]
# lint the Python code with flake8 (code linter), black (code formatter), and
# isort (sorting of imports)
package = skip
deps =
    black
    blackdoc
    flake8
    flake8-bugbear
    isort

commands =
    flake8 {[testenv]lint_folders}
    black --check --diff {[testenv]lint_folders}
    blackdoc --check --diff {[testenv]lint_folders}
    isort --check-only --diff {[testenv]lint_folders}


[testenv:all-deps]
# Run Python unit tests with all dependencies installed (ase & chemfiles are
# optional dependencies)
deps =
    {[testenv]equistore-core-requirement}
    ase
    chemfiles
    pytest
    pytest-cov

commands =
    pytest --cov={env_site_packages_dir}/rascaline --cov-report xml:.tox/coverage.xml --import-mode=append {posargs}


[testenv:min-deps]
# Run Python unit tests with the minimal dependencies installed
deps =
    {[testenv]equistore-core-requirement}
    pytest

commands =
    pytest --import-mode=append {posargs}


[testenv:torch-tests]
deps =
    {[testenv]equistore-torch-requirement}

    pytest
    numpy
    torch
    ase

    cmake
    wheel

changedir = python/rascaline-torch
commands =
    # install rascaline-torch
    pip install .  --no-deps --no-build-isolation --check-build-dependencies --force-reinstall
    # run the unit tests
    pytest --import-mode=append {posargs}

[testenv:docs]
deps =
    -r docs/requirements.txt

allowlist_externals =
    bash

commands =
    bash -c "rm -rf docs/src/examples"
    sphinx-build {posargs:-E} -W -b html docs/src docs/build/html


[testenv:build-python]
package = skip
# Make sure we can build sdist and a wheel for python
deps =
    twine
    build

allowlist_externals =
    bash

commands =
    python --version  # print the version of python used in this test

    bash -c "rm -rf {envtmpdir}/dist"

    # check building sdist from a checkout, and wheel from the sdist
    python -m build . --outdir {envtmpdir}/dist

    twine check {envtmpdir}/dist/*.tar.gz
    twine check {envtmpdir}/dist/*.whl

    # check building wheels directly from the a checkout
    python -m build . --wheel --outdir {envtmpdir}/dist

[testenv:docs-tests]
# this environement runs the doctests defined in any equistore package
deps =
    {[testenv]equistore-core-requirement}
    ase
    pytest

commands =
    pytest --doctest-modules --pyargs rascaline

[testenv:format]
package = skip
# Abuse tox to do actual formatting. Users can call `tox -e format` to run
# formatting on all files
deps =
    black
    blackdoc
    isort
commands =
    black {[testenv]lint_folders}
    blackdoc {[testenv]lint_folders}
    isort {[testenv]lint_folders}


[flake8]
max_line_length = 88
extend-ignore = E203
