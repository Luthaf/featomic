[tox]
min_version = 4.9.0
# these are the default environments, i.e. the list of tests running when you
# execute `tox` in the command-line without anything else
envlist =
    lint
    min-deps
    all-deps
    docs-tests
    torch-tests


[testenv]
package = external
package_env = build-rascaline
passenv = *
lint-folders = "{toxinidir}/python" "{toxinidir}/setup.py"

# we need to manually install dependencies for rascaline, since tox will install
# the fresh wheel with `--no-deps` after building it.
metatensor-core-requirement =
    metatensor-core >=0.1.0,<0.2.0

metatensor-torch-requirement =
    metatensor-torch >=0.1.0,<0.2.0

build-single-wheel = --no-deps --no-build-isolation --check-build-dependencies
test_options =
    --cov={env_site_packages_dir}/rascaline \
    --cov-append \
    --cov-report= \
    --import-mode=append


[testenv:build-rascaline]
description =
    This environment is only used to build the wheels which are then re-used by
    all other environments requiring rascaline to be installed
passenv = *
deps =
    setuptools
    wheel
    cmake

commands =
    pip wheel . {[testenv]build-single-wheel} --wheel-dir {envtmpdir}/dist


[testenv:all-deps]
description =
    Run Python unit tests with all dependencies installed (ase & chemfiles are optional
    dependencies)
deps =
    {[testenv]metatensor-core-requirement}
    ase
    chemfiles
    metatensor-operations
    pytest
    pytest-cov
    scipy
    sympy
    pyscf
    wigners
    # TODO: add mops once support for windows available
    # git+https://github.com/lab-cosmo/mops

commands =
    pytest {[testenv]test_options} {posargs}


[testenv:min-deps]
description = Run Python unit tests with the minimal dependencies installed
deps =
    {[testenv]metatensor-core-requirement}
    pytest
    pytest-cov

commands =
    pytest {[testenv]test_options} {posargs}


[testenv:torch-tests]
description = Run Python unit tests using torch
deps =
    {[testenv]metatensor-torch-requirement}

    pytest
    pytest-cov
    numpy
    torch
    ase

    cmake
    wheel

changedir = python/rascaline-torch
commands =
    # install rascaline-torch
    pip install . {[testenv]build-single-wheel} --force-reinstall
    # run the unit tests
    pytest {[testenv]test_options} --assert=plain {posargs}

[testenv:docs]
description = Build the package documentation.
deps =
    -r docs/requirements.txt
    cmake
    build

allowlist_externals =
    bash

commands =
    # install rascaline-torch
    pip install python/rascaline-torch --no-deps --no-build-isolation --force-reinstall

    bash -c "rm -rf docs/src/examples"
    sphinx-build {posargs:-E} -W -b html docs/src docs/build/html


[testenv:docs-tests]
description =  Runs the doctests defined in any metatensor package
deps =
    {[testenv]metatensor-core-requirement}
    ase
    pyscf
    pytest

commands =
    pytest --doctest-modules --pyargs rascaline


[testenv:lint]
description =
    lint the Python code with flake8 (code linter), black (code formatter), and isort
    (sorting of imports)
package = skip
deps =
    black
    blackdoc
    flake8
    flake8-bugbear
    flake8-sphinx-links
    isort

commands =
    flake8 {[testenv]lint-folders}
    black --check --diff {[testenv]lint-folders}
    blackdoc --check --diff {[testenv]lint-folders}
    isort --check-only --diff {[testenv]lint-folders}


[testenv:format]
description = Abuse tox to do actual formatting on all files.
package = skip
deps =
    black
    blackdoc
    isort
commands =
    black {[testenv]lint-folders}
    blackdoc {[testenv]lint-folders}
    isort {[testenv]lint-folders}


[testenv:build-python]
package = skip
# Make sure we can build sdist and a wheel for python
deps =
    twine
    build

allowlist_externals =
    bash

commands =
    python --version  # print the version of python used in this test

    bash ./scripts/package-torch.sh

    bash -c "rm -rf {envtmpdir}/dist"

    # check building sdist from a checkout, and wheel from the sdist
    python -m build . --outdir {envtmpdir}/dist

    # for rascaline-torch, we can not build from a sdist until rascaline
    # is available on PyPI, so we build both sdist and wheel from a checkout
    python -m build python/rascaline-torch --sdist --outdir {envtmpdir}/dist
    python -m build python/rascaline-torch --wheel --outdir {envtmpdir}/dist

    twine check {envtmpdir}/dist/*.tar.gz
    twine check {envtmpdir}/dist/*.whl

    # check building wheels directly from the a checkout
    python -m build . --wheel --outdir {envtmpdir}/dist


[flake8]
max_line_length = 88
extend-ignore = E203

[coverage:report]
skip_covered = True
show_missing = True
omit =
    tests/.*
    examples/.*

[coverage:paths]
rascaline =
    python/rascaline/rascaline
    .tox/*/lib/python*/site-packages/rascaline

rascaline_torch =
    python/rascaline-torch/rascaline/torch
    .tox/*/lib/python*/site-packages/rascaline/torch
